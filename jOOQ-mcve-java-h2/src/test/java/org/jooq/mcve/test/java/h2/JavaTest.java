package org.jooq.mcve.test.java.h2;

import org.jooq.DSLContext;
import org.jooq.impl.DSL;
import org.jooq.mcve.java.h2.Keys;
import org.jooq.mcve.java.h2.Tables;
import org.jooq.mcve.java.h2.tables.records.ChildRecord;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.testcontainers.containers.MySQLContainer;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import static org.jooq.impl.DSL.multiset;
import static org.jooq.impl.DSL.selectFrom;
import static org.jooq.mcve.java.h2.Tables.CHILD;
import static org.jooq.mcve.java.h2.Tables.PARENT;

public class JavaTest {

    public Connection connection;
    public DSLContext ctx;

    public void prepareTest() {
        ctx.delete(CHILD).execute();
        ctx.delete(PARENT).execute();
        ctx.insertInto(PARENT).columns(PARENT.ID, PARENT.CP1).values(1, 1).values(2, 2).values(3, 3).execute();
        ctx.insertInto(CHILD).columns(CHILD.PARENT_ID, CHILD.CC1).values(1, 1).values(1, 2).values(2, 1).values(2, 2).execute();
    }

    @After
    public void after() throws Exception {
        ctx = null;
        connection.close();
        connection = null;
    }

    @Test
    public void multisetH2Test() throws SQLException {
        connection = DriverManager.getConnection("jdbc:h2:~/jooq-mcve-java-2", "sa", "");
        ctx = DSL.using(connection);
        prepareTest();
        multisetTest(ctx);
    }

    /**
     * This is just to verify that the query using multiset works correct on mysql.
     */
    @Test
    public void multisetMysqlTest() throws SQLException {
        MySQLContainer mySQLContainer = new MySQLContainer("mysql:8");
        mySQLContainer.start();
        connection = DriverManager.getConnection(mySQLContainer.getJdbcUrl() + "?allowMultiQueries=true", "root", mySQLContainer.getPassword());
        ctx = DSL.using(connection);
        // crude table creation
        ctx.createDatabase("MCVE").execute();
        ctx.createTable(PARENT).columns(PARENT.fields()).primaryKey(PARENT.getPrimaryKey().getFields()).execute();
        ctx.createTable(CHILD).columns(CHILD.fields()).primaryKey(CHILD.getPrimaryKey().getFields()).execute();
        prepareTest();
        multisetTest(ctx);
        mySQLContainer.stop();
    }


    public void multisetTest(DSLContext ctx) {
        ctx.select(
                        PARENT.ID,
                        PARENT.CP1,
                        multiset(selectFrom(CHILD).where(CHILD.PARENT_ID.eq(PARENT.ID))).as("children").convertFrom(r -> r.into(ChildRecord.class)))
                .from(PARENT)
                .execute();
    }
}
