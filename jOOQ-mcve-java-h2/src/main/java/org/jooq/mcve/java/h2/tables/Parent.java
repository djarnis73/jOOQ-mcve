/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.h2.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.h2.Keys;
import org.jooq.mcve.java.h2.Mcve;
import org.jooq.mcve.java.h2.tables.records.ParentRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Parent extends TableImpl<ParentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MCVE.PARENT</code>
     */
    public static final Parent PARENT = new Parent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ParentRecord> getRecordType() {
        return ParentRecord.class;
    }

    /**
     * The column <code>MCVE.PARENT.ID</code>.
     */
    public final TableField<ParentRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>MCVE.PARENT.CP1</code>.
     */
    public final TableField<ParentRecord, Integer> CP1 = createField(DSL.name("CP1"), SQLDataType.INTEGER, this, "");

    private Parent(Name alias, Table<ParentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Parent(Name alias, Table<ParentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>MCVE.PARENT</code> table reference
     */
    public Parent(String alias) {
        this(DSL.name(alias), PARENT);
    }

    /**
     * Create an aliased <code>MCVE.PARENT</code> table reference
     */
    public Parent(Name alias) {
        this(alias, PARENT);
    }

    /**
     * Create a <code>MCVE.PARENT</code> table reference
     */
    public Parent() {
        this(DSL.name("PARENT"), null);
    }

    public <O extends Record> Parent(Table<O> child, ForeignKey<O, ParentRecord> key) {
        super(child, key, PARENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public UniqueKey<ParentRecord> getPrimaryKey() {
        return Keys.PK_PARENT;
    }

    @Override
    public Parent as(String alias) {
        return new Parent(DSL.name(alias), this);
    }

    @Override
    public Parent as(Name alias) {
        return new Parent(alias, this);
    }

    @Override
    public Parent as(Table<?> alias) {
        return new Parent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Parent rename(String name) {
        return new Parent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Parent rename(Name name) {
        return new Parent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Parent rename(Table<?> name) {
        return new Parent(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
