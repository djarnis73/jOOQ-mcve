/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.h2.tables.records;


import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.mcve.java.h2.tables.Child;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChildRecord extends UpdatableRecordImpl<ChildRecord> implements Record2<Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>MCVE.CHILD.PARENT_ID</code>.
     */
    public void setParentId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>MCVE.CHILD.PARENT_ID</code>.
     */
    public Integer getParentId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>MCVE.CHILD.CC1</code>.
     */
    public void setCc1(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>MCVE.CHILD.CC1</code>.
     */
    public Integer getCc1() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Child.CHILD.PARENT_ID;
    }

    @Override
    public Field<Integer> field2() {
        return Child.CHILD.CC1;
    }

    @Override
    public Integer component1() {
        return getParentId();
    }

    @Override
    public Integer component2() {
        return getCc1();
    }

    @Override
    public Integer value1() {
        return getParentId();
    }

    @Override
    public Integer value2() {
        return getCc1();
    }

    @Override
    public ChildRecord value1(Integer value) {
        setParentId(value);
        return this;
    }

    @Override
    public ChildRecord value2(Integer value) {
        setCc1(value);
        return this;
    }

    @Override
    public ChildRecord values(Integer value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ChildRecord
     */
    public ChildRecord() {
        super(Child.CHILD);
    }

    /**
     * Create a detached, initialised ChildRecord
     */
    public ChildRecord(Integer parentId, Integer cc1) {
        super(Child.CHILD);

        setParentId(parentId);
        setCc1(cc1);
    }
}
