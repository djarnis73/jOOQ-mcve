/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.h2.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.h2.Keys;
import org.jooq.mcve.java.h2.Mcve;
import org.jooq.mcve.java.h2.tables.records.ChildRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Child extends TableImpl<ChildRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MCVE.CHILD</code>
     */
    public static final Child CHILD = new Child();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChildRecord> getRecordType() {
        return ChildRecord.class;
    }

    /**
     * The column <code>MCVE.CHILD.PARENT_ID</code>.
     */
    public final TableField<ChildRecord, Integer> PARENT_ID = createField(DSL.name("PARENT_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>MCVE.CHILD.CC1</code>.
     */
    public final TableField<ChildRecord, Integer> CC1 = createField(DSL.name("CC1"), SQLDataType.INTEGER.nullable(false), this, "");

    private Child(Name alias, Table<ChildRecord> aliased) {
        this(alias, aliased, null);
    }

    private Child(Name alias, Table<ChildRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>MCVE.CHILD</code> table reference
     */
    public Child(String alias) {
        this(DSL.name(alias), CHILD);
    }

    /**
     * Create an aliased <code>MCVE.CHILD</code> table reference
     */
    public Child(Name alias) {
        this(alias, CHILD);
    }

    /**
     * Create a <code>MCVE.CHILD</code> table reference
     */
    public Child() {
        this(DSL.name("CHILD"), null);
    }

    public <O extends Record> Child(Table<O> child, ForeignKey<O, ChildRecord> key) {
        super(child, key, CHILD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public UniqueKey<ChildRecord> getPrimaryKey() {
        return Keys.PK_CHILD;
    }

    @Override
    public List<ForeignKey<ChildRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PARENT);
    }

    private transient Parent _parent;

    /**
     * Get the implicit join path to the <code>MCVE.PARENT</code> table.
     */
    public Parent parent() {
        if (_parent == null)
            _parent = new Parent(this, Keys.FK_PARENT);

        return _parent;
    }

    @Override
    public Child as(String alias) {
        return new Child(DSL.name(alias), this);
    }

    @Override
    public Child as(Name alias) {
        return new Child(alias, this);
    }

    @Override
    public Child as(Table<?> alias) {
        return new Child(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Child rename(String name) {
        return new Child(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Child rename(Name name) {
        return new Child(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Child rename(Table<?> name) {
        return new Child(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
